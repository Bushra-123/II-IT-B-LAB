EXPERIMENT-2

AIM OF THE EXPERIMENT:-Write a C program that uses both recursive and non recursive functions to perform the following searching operations for a Key value in a given
List of integers using binary search method.


DESCRIPTION OF BINARY SEARCH:-
The binary Search is also known as half-interval search, logarithmic search, or binary chop.
1.The binary search searches the position of the target value in a sorted array. 
2.It compares the target value with the middle element of the array.
3.If the element is equal to the target element then the algorithm returns the index of the found element.
4.And if they are not equal,the searching algorithm uses a half section of that array, Based on the comparison of the value,the algorithm uses either of the first-half(when the 
value is less than the middle ) and the second half ( when the value is greater than the middle ). And does the same for the next array half.
































#include<stdio.h>
#include<stdlib.h>
#define size 10
int binsearch(int[], int, int, int);
int main() {
   int num, i, key, position;
   int low, high, list[size];
   printf("\nEnter the total number of elements:-");
   scanf("%d", &num);
   printf("\nEnter the elements of array:-");
   for (i = 0; i < num; i++) {
      scanf("%d", &list[i]);
   }
   low = 0;
   high = num - 1;
   printf("\nEnter Key element to be searched:-");
   scanf("%d", &key);
   position = binsearch(list, key, low, high);
   if (position != -1) {
      printf("\nNumber present at %d", (position + 1));
   } else
      printf("\n The number is not present in the list");
   return (0);
}
int binsearch(int a[], int x, int low, int high) {
   int mid;
   if (low > high)
      return -1;
   mid = (low + high) / 2;
   if (x == a[mid]) {
      return (mid);
   } else if (x < a[mid]) {
      binsearch(a, x, low, mid - 1);
   } else {
      binsearch(a, x, mid + 1, high);
   }
}
